{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { concatMap, map, switchMap } from 'rxjs/operators';\nimport * as eventAction from './event-details.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"./../services/event-details.service\";\nimport * as i3 from \"./../../../../auth/services/auth.service\";\nimport * as i4 from \"ngx-spinner\";\nexport let EventDetailsEffects = /*#__PURE__*/(() => {\n  class EventDetailsEffects {\n    constructor(actions$, eventDetailsService, serviceAuth, spinner) {\n      this.actions$ = actions$;\n      this.eventDetailsService = eventDetailsService;\n      this.serviceAuth = serviceAuth;\n      this.spinner = spinner;\n      this.loadEvent$ = createEffect(() => {\n        return this.actions$.pipe(ofType(eventAction.loadEventDetailss), switchMap(dataUser => {\n          this.spinner.show();\n          const user = this.serviceAuth.getUserLocalStorage();\n          return this.eventDetailsService.getEvent(user.id).pipe(map(event => {\n            this.spinner.hide();\n            return eventAction.loadEventDetailssSuccess(Object.assign({}, event));\n          }));\n        }));\n      });\n      this.updateEvent$ = createEffect(() => {\n        return this.actions$.pipe(ofType(eventAction.updateEvent), concatMap(action => {\n          this.spinner.show();\n          const user = this.serviceAuth.getUserLocalStorage();\n          return this.eventDetailsService.updateEvent(user.id, action).pipe(map(event => {\n            this.spinner.hide();\n            event = action;\n            return eventAction.updateEventSuccess({\n              event\n            });\n          }));\n        }));\n      });\n    }\n\n  }\n\n  EventDetailsEffects.ɵfac = function EventDetailsEffects_Factory(t) {\n    return new (t || EventDetailsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.EventDetailsService), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.NgxSpinnerService));\n  };\n\n  EventDetailsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventDetailsEffects,\n    factory: EventDetailsEffects.ɵfac\n  });\n  return EventDetailsEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}