{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport * as authAction from './auth.actions';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as sharedAction from '../../shared/store/shared.actions';\nimport * as eventAction from '../../dashboard/components/event-details/store/event-details.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"@ngrx/store\";\nimport * as i5 from \"@angular/router\";\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, serviceAuth, spinner, store, router) {\n      this.actions$ = actions$;\n      this.serviceAuth = serviceAuth;\n      this.spinner = spinner;\n      this.store = store;\n      this.router = router;\n      this.login$ = createEffect(() => {\n        return this.actions$.pipe(ofType(authAction.loginStart), exhaustMap(action => {\n          this.spinner.show();\n          return this.serviceAuth.login(action.email, action.password).pipe(map(data => {\n            this.spinner.hide();\n            this.serviceAuth.setUserLocalStorage(data);\n            this.router.navigateByUrl('/dashboard');\n            sharedAction.setErrorMessage({\n              error: null\n            });\n            return authAction.loginSuccess({\n              user: data,\n              redirect: true\n            });\n          }), catchError(error => {\n            this.spinner.hide();\n            const errorMessage = this.serviceAuth.getErrorMessage(error.error.message);\n            return of(sharedAction.setErrorMessage({\n              error: errorMessage\n            }));\n          }));\n        }));\n      });\n      this.signup$ = createEffect(() => {\n        return this.actions$.pipe(ofType(authAction.signupStart, eventAction.createEvent), exhaustMap(action => {\n          this.spinner.show();\n          return this.serviceAuth.signup(action).pipe(map(data => {\n            this.spinner.hide();\n            sharedAction.setErrorMessage({\n              error: null\n            });\n            return authAction.signupSuccess({\n              user: data,\n              redirect: true\n            });\n          }), catchError(error => {\n            this.spinner.hide();\n            const errorMessage = this.serviceAuth.getErrorMessage(error.error.message);\n            return of(sharedAction.setErrorMessage({\n              error: errorMessage\n            }));\n          }));\n        }));\n      });\n      this.autoLogin$ = createEffect(() => {\n        return this.actions$.pipe(ofType(authAction.autologin), mergeMap(action => {\n          const user = this.serviceAuth.getUserLocalStorage();\n          return of(authAction.loginSuccess({\n            user,\n            redirect: false\n          }));\n        }));\n      });\n      this.logout$ = createEffect(() => {\n        return this.actions$.pipe(ofType(authAction.logout), map(() => {\n          return this.serviceAuth.logout();\n        }));\n      }, {\n        dispatch: false\n      });\n    }\n\n  }\n\n  AuthEffects.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.NgxSpinnerService), i0.ɵɵinject(i4.Store), i0.ɵɵinject(i5.Router));\n  };\n\n  AuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}